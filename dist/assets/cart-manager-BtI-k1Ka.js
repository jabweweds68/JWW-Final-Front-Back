var u=(o,t)=>()=>(t||o((t={exports:{}}).exports,t),t.exports);var p=u((g,d)=>{class l{constructor(){this.cart=this.loadCartFromStorage(),this.API_BASE_URL="https://jww-backend-main-production.up.railway.app",this.productsData=[],this.fallbackProducts={strawbae:{name:"Strawbae",image:"./assets/images/strawbae.png",chocolate:"./assets/images/strawbae.png",basePrice:50},darkdesire:{name:"Dark Desire",image:"./assets/images/darkdesire.png",chocolate:"./assets/images/darkdesire.png",basePrice:50},vanilla:{name:"Vanillalust",image:"./assets/images/vanillalust.png",chocolate:"./assets/images/vanillalust.png",basePrice:50}},this.initCartElements(),this.loadProductsData()}async loadProductsData(){try{const e=await(await fetch(`${this.API_BASE_URL}/GetAllProducts`)).json();e.success&&(this.productsData=e.products)}catch(t){console.error("Error loading products data:",t)}}getProductById(t){return this.productsData.find(e=>e._id===t)}getImageUrl(t){if(!t)return"./assets/images/ABout-pic.png";const e=typeof t=="string"?t:t.url;return e?`${this.API_BASE_URL}${e}`:"./assets/images/ABout-pic.png"}loadCartFromStorage(){try{const t=localStorage.getItem("jww_cart");return t?JSON.parse(t):[]}catch(t){return console.error("Error loading cart from storage:",t),[]}}saveCartToStorage(){try{localStorage.setItem("jww_cart",JSON.stringify(this.cart)),window.dispatchEvent(new CustomEvent("cartUpdated",{detail:{cart:this.cart,count:this.getCartCount(),total:this.getCartTotal()}}))}catch(t){console.error("Error saving cart to storage:",t)}}initCartElements(){this.cartContainer=document.querySelector(".products-wrapper"),this.emptyMessage=document.getElementById("empty-cart-message"),this.cartTotals=document.getElementById("cart-totals"),this.openCartButton=document.getElementById("open-cart"),this.closeCartButton=document.getElementById("close-cart"),this.cartSection=document.getElementById("cart"),this.openCartButton&&this.openCartButton.addEventListener("click",()=>this.openCart()),this.closeCartButton&&this.closeCartButton.addEventListener("click",()=>this.closeCart());const t=document.getElementById("clear-cart");t&&t.addEventListener("click",()=>this.clearCart()),window.addEventListener("storage",e=>{e.key==="jww_cart"&&(this.cart=this.loadCartFromStorage(),this.updateCartDisplay())}),window.addEventListener("cartUpdated",()=>{this.updateCartDisplay()}),setTimeout(()=>this.updateCartDisplay(),100)}addToCart(t){const e={productId:t.productId||t.id,name:t.name,image:t.image,flavor:t.flavor||t.productId,size:t.size||"regular",sizePrice:t.sizePrice||50,boxCount:t.boxCount||1,totalPrice:t.totalPrice||t.sizePrice||50,quantity:1},s=this.cart.findIndex(a=>a.productId===e.productId&&a.size===e.size&&a.boxCount===e.boxCount);return s>-1?this.cart[s].quantity+=1:this.cart.push(e),this.saveCartToStorage(),this.updateCartDisplay(),this.showCartNotification(),!0}changeQuantity(t,e){this.cart[t]&&(this.cart[t].quantity+=e,this.cart[t].quantity<=0&&this.cart.splice(t,1),this.saveCartToStorage(),this.updateCartDisplay())}clearCart(){this.cart=[],this.saveCartToStorage(),this.updateCartDisplay()}updateCartDisplay(){if(this.cartContainer){if(this.cart.length===0){this.emptyMessage&&(this.emptyMessage.style.display="block"),this.cartTotals&&(this.cartTotals.style.display="none"),this.cartContainer.innerHTML="";return}this.emptyMessage&&(this.emptyMessage.style.display="none"),this.cartTotals&&(this.cartTotals.style.display="block"),this.cartContainer.innerHTML=this.cart.map((t,e)=>`
            <div class="cart-products">
                <div class="right-content-ct">
                    <div class="image-cart-p">
                        <img src="${t.image}" alt="${t.name}" onerror="this.src='./assets/images/ABout-pic.png'">
                    </div>
                    <div class="content-cart-product">
                        <div class="name-p">${t.name}</div>
                        <div class="p-size-cart">${t.size?t.size.charAt(0).toUpperCase()+t.size.slice(1):"Regular"} - ${t.boxCount} Box${t.boxCount>1?"es":""}</div>
                        <div class="price-p">PKR: ${t.totalPrice*t.quantity}</div>
                    </div>
                </div>
                <div class="inc-dec-btn">
                    <div class="inc" onclick="cartManager.changeQuantity(${e}, 1)">+</div>
                    <div class="quantity">${t.quantity.toString().padStart(2,"0")}</div>
                    <div class="dec" onclick="cartManager.changeQuantity(${e}, -1)">-</div>
                </div>
            </div>
        `).join(""),this.updateCartTotals()}}updateCartTotals(){const t=this.cart.reduce((n,c)=>n+c.totalPrice*c.quantity,0),s=t+250,a=document.getElementById("products-total"),r=document.getElementById("subtotal");a&&(a.textContent=t),r&&(r.textContent=s)}openCart(){this.cartSection&&this.cartSection.classList.add("active")}closeCart(){this.cartSection&&this.cartSection.classList.remove("active")}showCartNotification(){const t=document.getElementById("add-to-cart");if(t){const e=t.textContent;t.textContent="ADDED!",t.style.backgroundColor="#4CAF50",setTimeout(()=>{t.textContent=e,t.style.backgroundColor=""},1500)}else this.showTemporaryNotification("Item added to cart!")}showTemporaryNotification(t){let e=document.getElementById("cart-notification");e||(e=document.createElement("div"),e.id="cart-notification",e.style.cssText=`
                position: fixed;
                top: 20px;
                right: 20px;
                background: #4CAF50;
                color: white;
                padding: 15px 20px;
                border-radius: 5px;
                z-index: 1000;
                font-weight: bold;
                opacity: 0;
                transition: opacity 0.3s ease;
            `,document.body.appendChild(e)),e.textContent=t,e.style.opacity="1",setTimeout(()=>{e.style.opacity="0"},2e3)}getCartCount(){return this.cart.reduce((t,e)=>t+e.quantity,0)}getCartTotal(){return this.cart.reduce((t,e)=>t+e.totalPrice*e.quantity,0)}createProductDataFromFlavor(t,e="small",s=1){const a={small:1,medium:1.5,large:2},r=this.fallbackProducts[t];if(!r)return console.error("Product not found:",t),null;const n=r.basePrice*(a[e]||1),c=n*s;return{productId:`${t}_home`,name:r.name,image:r.image,flavor:t,size:e,sizePrice:n,boxCount:s,totalPrice:c}}addFromHomePage(t,e="small",s=1){const a=this.createProductDataFromFlavor(t,e,s);return a?this.addToCart(a):!1}}const i=new l;window.cartManager=i;window.addToCartFromHome=function(o,t="small",e=1){return i.addFromHomePage(o,t,e)};typeof d<"u"&&d.exports&&(d.exports=l);document.addEventListener("DOMContentLoaded",function(){setTimeout(()=>{i.updateCartDisplay(),i.getCartCount()},200)});window.addEventListener("storage",function(o){o.key==="jww_cart"&&(i.cart=i.loadCartFromStorage(),i.updateCartDisplay())})});export default p();
